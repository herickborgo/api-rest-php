{"files":[{"name":"src\/helper.php","appliedFixers":["braces"],"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n-    function config(string $config = '') {\n+    function config(string $config = '')\n+    {\n         $index = strpos($config, '.');\n         if ($index === false) {\n             $index = strlen($config);\n         }\n         $file = substr_replace($config, '', $index, strlen($config));\n         $key = substr_replace($config, '', 0, $index);\n         $config = file_get_contents(sprintf('', $file));\n         return $config[$key];\n     }\n }\n \n"},{"name":"src\/Domain\/Shared\/UUID.php","appliedFixers":["braces","method_argument_space"],"diff":"--- Original\n+++ New\n@@ @@\n {\n-    public static function v3($namespace, $name) {\n-        if(!self::is_valid($namespace)) return false;\n+    public static function v3($namespace, $name)\n+    {\n+        if (!self::is_valid($namespace)) {\n+            return false;\n+        }\n@@ @@\n         \/\/ Convert Namespace UUID to bits\n-        for($i = 0; $i < strlen($nhex); $i+=2) {\n+        for ($i = 0; $i < strlen($nhex); $i+=2) {\n@@ @@\n \n-        return sprintf('%08s-%04s-%04x-%04x-%12s',\n+        return sprintf(\n+            '%08s-%04s-%04x-%04x-%12s',\n@@ @@\n \n-    public static function v4() {\n-        return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n+    public static function v4()\n+    {\n+        return sprintf(\n+            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n \n             \/\/ 32 bits for \"time_low\"\n-            mt_rand(0, 0xffff), mt_rand(0, 0xffff),\n+            mt_rand(0, 0xffff),\n+            mt_rand(0, 0xffff),\n@@ @@\n             \/\/ 48 bits for \"node\"\n-            mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)\n+            mt_rand(0, 0xffff),\n+            mt_rand(0, 0xffff),\n+            mt_rand(0, 0xffff)\n         );\n     }\n \n-    public static function v5($namespace, $name) {\n-        if(!self::is_valid($namespace)) return false;\n+    public static function v5($namespace, $name)\n+    {\n+        if (!self::is_valid($namespace)) {\n+            return false;\n+        }\n@@ @@\n         \/\/ Convert Namespace UUID to bits\n-        for($i = 0; $i < strlen($nhex); $i+=2) {\n+        for ($i = 0; $i < strlen($nhex); $i+=2) {\n@@ @@\n \n-        return sprintf('%08s-%04s-%04x-%04x-%12s',\n+        return sprintf(\n+            '%08s-%04s-%04x-%04x-%12s',\n@@ @@\n \n-    public static function is_valid($uuid) {\n+    public static function is_valid($uuid)\n+    {\n         return preg_match('\/^\\{?[0-9a-f]{8}\\-?[0-9a-f]{4}\\-?[0-9a-f]{4}\\-?[0-9a-f]{4}\\-?[0-9a-f]{12}\\}?$\/i', $uuid) === 1;\n     }\n }\n \n"},{"name":"src\/Domain\/Shared\/Service.php","appliedFixers":["indentation_type"],"diff":"--- Original\n+++ New\n@@ @@\n {\n-\tprotected $modelClass;\n+    protected $modelClass;\n \n-\tprotected function fill(&$model, array $data): void\n-\t{\n-\t\tthrow new \\Exception(\"Fill method not implemented\", 500);\n-\t}\n+    protected function fill(&$model, array $data): void\n+    {\n+        throw new \\Exception(\"Fill method not implemented\", 500);\n+    }\n \n-\tpublic function create(array $data): Model\n-\t{\n-\t\t$model = new $this->modelClass();\n-\t\t$this->fill($model, $data);\n-\t\t$model->save();\n-\t\treturn $model;\n-\t}\n+    public function create(array $data): Model\n+    {\n+        $model = new $this->modelClass();\n+        $this->fill($model, $data);\n+        $model->save();\n+        return $model;\n+    }\n \n-\tpublic function update(Model $model, array $data): Model\n-\t{\n-\t\t$this->fill($model, $data);\n-\t\t$model->save();\n-\t\treturn $model;\n-\t}\n+    public function update(Model $model, array $data): Model\n+    {\n+        $this->fill($model, $data);\n+        $model->save();\n+        return $model;\n+    }\n }\n \n"},{"name":"config\/Router\/Router.php","appliedFixers":["line_ending"],"diff":"--- Original\n+++ New\n@@ @@\n #Warnings contain different line endings!\n <?php\n \n namespace Config\\Router;\n \n class Router\n {\n     \/** @var array *\/\n     private $routes;\n     \/** @var string *\/\n     private $namespace;\n \n     public function __construct($namespace)\n     {\n         $this->namespace = $namespace;\n     }\n \n     \/**\n      * @return void\n      * @throws \\Exception\n      *\/\n     public function run()\n     {\n         try {\n             $input = json_decode(file_get_contents('php:\/\/input'), true);\n             if (is_null($input)) {\n                 $input = [];\n             }\n             $request = array_merge($input, $_GET);\n             $uriParts = $this->getPartsOfUri();\n             if (count($uriParts) === 1 && empty($uriParts[0])) {\n                 header('Content-Type: text\/html; charset=utf-8;');\n                 echo \"<div style='top: 45%; left: 45%; position: absolute;'>API REST PHP<\/div>\";\n                 return;\n             }\n             $routesByRequestMethod = $this->getRoutesByContext($uriParts[0]);\n \n             $routesKeys = array_keys($routesByRequestMethod);\n             $paramsOfUri = [];\n             $routeCalled = '';\n             foreach ($routesKeys as $routesKey) {\n                 $routesKeyWithoutFirstBar = $this->removeFirstBar($routesKey);\n                 $routeParts = explode('\/', $routesKeyWithoutFirstBar);\n                 $indexParam = 0;\n                 if (count($routeParts) !== count($uriParts)) {\n                     continue;\n                 }\n \n                 foreach ($routeParts as $routePart) {\n                     if ($routePart === $uriParts[$indexParam]) {\n                         $routeCalled .= '\/' . $routePart;\n                         $indexParam++;\n                         continue;\n                     }\n \n                     if ($routePart !== $uriParts[$indexParam]) {\n                         preg_match('\/^[{][a-zA-Z0-9]{1,}[}]$\/', $routePart, $match);\n                         if (!$match) {\n                             throw new \\Exception('Route not found', 404);\n                         }\n                         $routeCalled .= '\/' . $routePart;\n                         $paramsOfUri[] = $uriParts[$indexParam];\n                     }\n                     $indexParam++;\n                 }\n             }\n             if (!$routeCalled) {\n                 throw new \\Exception('Route not found', 404);\n             }\n             $callbacks = explode('@', $routesByRequestMethod[$routeCalled]['callback']);\n             $middleware = $routesByRequestMethod[$routeCalled]['middleware'];\n             foreach ($middleware as $middle) {\n                 new $middle();\n             }\n             $className = $this->namespace . $callbacks[0];\n             $controller = new $className();\n             if (!in_array($this->getRequestMethod(), $this->getMethodsWithBody())) {\n                 echo json_encode($controller->{$callbacks[1]}($request, ...$paramsOfUri));\n                 return;\n             }\n             echo json_encode($controller->{$callbacks[1]}(...$paramsOfUri));\n         } catch (\\Exception $e) {\n             throw new \\Exception($e->getMessage(), $e->getCode());\n         }\n     }\n \n     \/**\n      * @return array\n      *\/\n     private function getPartsOfUri()\n     {\n         $requestUri = preg_replace('\/([?]).{1,}\/', '', $_SERVER['REQUEST_URI']);\n         $uriWithoutFirstBar = $this->removeFirstBar($requestUri);\n         return explode('\/', $uriWithoutFirstBar);\n     }\n \n     \/**\n      * @param $string\n      * @return string\n      *\/\n     private function removeFirstBar($string)\n     {\n         return ltrim($string, '\/');\n     }\n \n     private function getRoutesByRequestMethod(): array\n     {\n         $requestMethod = $this->getRequestMethod();\n \n         return $this->getRoutes()[$requestMethod];\n     }\n \n     \/**\n      * @return string\n      *\/\n     private function getRequestMethod()\n     {\n         return strtolower($_SERVER['REQUEST_METHOD']);\n     }\n \n     public function getRoutes()\n     {\n         return $this->routes;\n     }\n \n     private function getMethodsWithBody()\n     {\n         return ['get', 'delete'];\n     }\n \n     \/**\n      * @param string $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function get(string $route, $callback, array $middleware = [])\n     {\n         $this->registerRoute('get', $route, $callback, $middleware);\n     }\n \n     \/**\n      * @param $method\n      * @param $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function registerRoute($method, $route, $callback, array $middleware = [])\n     {\n         preg_match('\/[{][(a-zA-Z)]*[}]\/', $route, $params);\n         $this->routes[$method][$route]['callback'] = $callback;\n         $this->routes[$method][$route]['params'] = [];\n         $this->routes[$method][$route]['middleware'] = $middleware;\n         foreach ($params as $item) {\n             $param = str_replace(['{', '}'], '', $item);\n             array_push($this->routes[$method][$route]['params'], $param);\n         }\n     }\n \n     \/**\n      * @param $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function post($route, $callback, array $middleware = [])\n     {\n         $this->registerRoute('post', $route, $callback, $middleware);\n     }\n \n     \/**\n      * @param $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function put($route, $callback, array $middleware = [])\n     {\n         $this->registerRoute('put', $route, $callback, $middleware);\n     }\n \n     \/**\n      * @param $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function delete($route, $callback, array $middleware = [])\n     {\n         $this->registerRoute('delete', $route, $callback, $middleware);\n     }\n \n     \/**\n      * @param $route\n      * @param $callback\n      * @param array $middleware\n      *\/\n     public function patch($route, $callback, array $middleware = [])\n     {\n         $this->registerRoute('patch', $route, $callback, $middleware);\n     }\n \n     private function getRoutesByContext(string $context)\n     {\n         $routes = $this->getRoutesByRequestMethod();\n \n         $response = [];\n         foreach ($routes as $key => $val) {\n             if (preg_match('\/' . $context . '\/', $key)) {\n                 $response[$key] = $val;\n             }\n         }\n         return $response;\n     }\n }\n \n"},{"name":"config\/Database\/Connection.php","appliedFixers":["indentation_type","line_ending","braces","single_blank_line_at_eof"],"diff":"--- Original\n+++ New\n@@ @@\n {\n-\tprivate $connection;\n-\tprivate static $instance;\n+    private $connection;\n+    private static $instance;\n \n-\tprivate function __construct()\n-\t{\n-\t\t$config = include 'connection_config.php';\n-\t\t$stringConnect = sprintf(\n-\t\t\t'%s:host=%s;port=%s;dbname=%s',\n-\t\t\t$config['db'],\n-\t\t\t$config['host'],\n-\t\t\t$config['port'],\n-\t\t\t$config['database']\n-\t\t);\n-\t\t$this->connection = new PDO($stringConnect, $config['user'], $config['password']);\n-\t}\n+    private function __construct()\n+    {\n+        $config = include 'connection_config.php';\n+        $stringConnect = sprintf(\n+            '%s:host=%s;port=%s;dbname=%s',\n+            $config['db'],\n+            $config['host'],\n+            $config['port'],\n+            $config['database']\n+        );\n+        $this->connection = new PDO($stringConnect, $config['user'], $config['password']);\n+    }\n \n-\tpublic static function connect()\n-\t{\n-\t\tif (!self::$instance) {\n-\t\t\tself::$instance = new self();\n-\t\t}\n-\t\treturn self::$instance;\n-\t}\n+    public static function connect()\n+    {\n+        if (!self::$instance) {\n+            self::$instance = new self();\n+        }\n+        return self::$instance;\n+    }\n \n-\tpublic function getConnection()\n-\t{\n-\t\treturn $this->connection;\n-\t}\n+    public function getConnection()\n+    {\n+        return $this->connection;\n+    }\n \n-\tpublic function runSQL(string $sql)\n-\t{\n-\t\ttry {\n-\t\t\t$statement = $this->connection->prepare($sql);\n-\t\t\t$statement->execute();\n-\t\t} catch (\\Exception $exception) {\n-\t\t\tvar_dump($exception);\n-\t\t\tdie();\n-\t\t}\n-\t}\n+    public function runSQL(string $sql)\n+    {\n+        try {\n+            $statement = $this->connection->prepare($sql);\n+            $statement->execute();\n+        } catch (\\Exception $exception) {\n+            var_dump($exception);\n+            die();\n+        }\n+    }\n \n-\tpublic function migrate()\n-\t{\n-\t\t$directory = $_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'database';\n-\t\t$files = scandir($directory);\n-\t\tforeach ($files as $file) {\n-\t\t\tif ($file == '.' || $file == '..') {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\t$sql = file_get_contents($directory . DIRECTORY_SEPARATOR . $file);\n-\t\t\t$this->runSQL($sql);\n-\t\t}\n-\t}\n+    public function migrate()\n+    {\n+        $directory = $_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'database';\n+        $files = scandir($directory);\n+        foreach ($files as $file) {\n+            if ($file == '.' || $file == '..') {\n+                continue;\n+            }\n+            $sql = file_get_contents($directory . DIRECTORY_SEPARATOR . $file);\n+            $this->runSQL($sql);\n+        }\n+    }\n \n     public function getUser()\n     {\n-\n     }\n }\n+\n"},{"name":"config\/Middleware\/Middleware.php","appliedFixers":["single_blank_line_at_eof"],"diff":"--- Original\n+++ New\n@@ @@\n }\n+\n"},{"name":"config\/Middleware\/TokenVerify.php","appliedFixers":["single_blank_line_at_eof"],"diff":"--- Original\n+++ New\n@@ @@\n }\n+\n"},{"name":"config\/Controller\/Controller.php","appliedFixers":["indentation_type","blank_line_after_namespace"],"diff":"--- Original\n+++ New\n@@ @@\n <?php\n \n namespace Config\\Controller;\n+\n class Controller\n {\n-\tpublic $service = null;\n+    public $service = null;\n \n     public function __construct()\n     {\n-    \t$controller = get_class($this);\n-    \t$serviceClass = str_replace('Controller', 'Service', $controller);\n-    \tif (class_exists($serviceClass)) {\n+        $controller = get_class($this);\n+        $serviceClass = str_replace('Controller', 'Service', $controller);\n+        if (class_exists($serviceClass)) {\n             $this->service = new $serviceClass();\n         } else {\n-    \t    $this->service = null;\n+            $this->service = null;\n         }\n     }\n }\n \n"}],"time":{"total":0.069},"memory":14}